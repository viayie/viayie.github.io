<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[object Object]</title>
    <link href="/2021/08/08/cpp/"/>
    <url>/2021/08/08/cpp/</url>
    
    <content type="html"><![CDATA[<h4 id="作用域解析符"><a href="#作用域解析符" class="headerlink" title="作用域解析符"></a>作用域解析符</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">20</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;局部变量值为：&quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;全局变量值为：&quot;</span> &lt;&lt; ::a &lt;&lt; endl;<br>    <span class="hljs-comment">//如果::前面没有任何作用域，代表使用全局作用域</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="register关键字加强"><a href="#register关键字加强" class="headerlink" title="register关键字加强"></a>register关键字加强</h4><ol><li><p>寄存器不在内存中，寄存器变量不存在地址；</p></li><li><p>在C++中，对寄存器变量取地址操作，register对变量的声明变得无效，被定义的变量被强制放在内存中</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<span class="hljs-comment">//编译不通过：不正确的存储类“register”</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;a = %p\n&quot;</span>, &amp;a);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">输出结果：<br><span class="hljs-meta">&amp;a = 00CFF7B0</span><br></code></pre></div></td></tr></table></figure></li><li><p>C++ 中register无法在全局中定义变量，否则会提示“不正确的存储类”；</p><p>C 中register可以在全局中定义变量，当对变量进行取地址操作时警告“有坏的存储类”</p></li></ol><hr><h4 id="struct-的加强"><a href="#struct-的加强" class="headerlink" title="struct 的加强"></a>struct 的加强</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">int</span> age;<br>    <span class="hljs-comment">//void func();//C语言下结构体中不能放函数</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu1</span> =</span> &#123;<span class="hljs-string">&quot;wang&quot;</span>, <span class="hljs-number">11</span>&#125;;<span class="hljs-comment">//c语言要加struct 关键字</span><br><br>Student stu2 = &#123; <span class="hljs-string">&quot;wang&quot;</span>, <span class="hljs-number">11</span> &#125;;<span class="hljs-comment">//c++认为struct是一个新类型的定义声明， 可以直接使用结构体名来定义变量</span><br><br></code></pre></div></td></tr></table></figure><hr><h4 id="三目运算符的加强"><a href="#三目运算符的加强" class="headerlink" title="三目运算符的加强"></a>三目运算符的加强</h4><ol><li><p>c++中三目运算符可作左值使用</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>(a &gt; b ? a : b) = <span class="hljs-number">40</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %d&quot;</span>, b);<span class="hljs-comment">//输出结果 b = 40</span><br></code></pre></div></td></tr></table></figure></li><li><p>实现原理</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">*（a&gt;b ? &amp;a : &amp;b）= <span class="hljs-number">40</span>;<br><span class="hljs-comment">//*（a&gt;20 ? &amp;a : &amp;20）= 40;无法通过编译</span><br></code></pre></div></td></tr></table></figure></li></ol><hr><h4 id="bool-类型"><a href="#bool-类型" class="headerlink" title="bool 类型"></a>bool 类型</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">bool</span> a;<br>cout &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a) &lt;&lt; endl;<br><span class="hljs-comment">//输出1（byte）；</span><br><span class="hljs-comment">//如果多个bool变量定义在一起，可能会各占 1 bit,这取决于编译器的实现</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="c-c-中-const"><a href="#c-c-中-const" class="headerlink" title="c/c++ 中 const"></a>c/c++ 中 const</h4><ol><li><p>c 语言中的 const</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*全局*/</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> m_A = <span class="hljs-number">200</span>;<span class="hljs-comment">//全局const受到常量区保护</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> *p = &amp;m_A;<br>    *p = <span class="hljs-number">100</span>;<span class="hljs-comment">//语法通过，运行阶段报错。</span><br>&#125;<br><br><span class="hljs-comment">/*局部*/</span><br><span class="hljs-comment">//修饰的是 只读变量 ， 本质上仍是变量，有自己存储空间</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> m_B = <span class="hljs-number">200</span>;<br>    <span class="hljs-keyword">int</span> *p = &amp;m_B;<br>    *p = <span class="hljs-number">100</span>;<span class="hljs-comment">//可以间接修改</span><br><br>    <span class="hljs-keyword">int</span> arr[m_B];<span class="hljs-comment">//err 不可以初始化数组</span><br>&#125;<br><br><span class="hljs-comment">/*const在C语言下默认是外部链接属性*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//在另一个.c文件中有 const int m_C = 20;</span><br>    <span class="hljs-keyword">extern</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> m_C;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;m_C = %d\n&quot;</span>, m_C);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>c++ 中的const </p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">/*全局*/</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> m_A = <span class="hljs-number">200</span>;<span class="hljs-comment">//全局const受到常量区保护</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> *p = (<span class="hljs-keyword">int</span> *)&amp;m_A;<br>    *p = <span class="hljs-number">100</span>;<span class="hljs-comment">//语法通过，运行阶段报错。</span><br>&#125;<br><br><span class="hljs-comment">/*局部*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> m_B = <span class="hljs-number">200</span>;<span class="hljs-comment">//被编译器放到符号表中去</span><br>    <span class="hljs-keyword">int</span> *p = (<span class="hljs-keyword">int</span> *)&amp;m_B;<br>    *p = <span class="hljs-number">100</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;m_B = &quot;</span> &lt;&lt; m_B &lt;&lt; endl;<br>    <span class="hljs-comment">//修改不成功，使用时，值是从符号表获取，而不是分配的存储空间的值</span><br><br>    <span class="hljs-keyword">int</span> arr[m_B];<span class="hljs-comment">//可以初始化数组 常量</span><br>&#125;<br><br><span class="hljs-comment">/*const在C++下默认是内部部链接属性*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//在另一个.c文件中有 const int m_C = 20;</span><br>    <span class="hljs-keyword">extern</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> m_C;<br><br>    cout &lt;&lt; m_C &lt;&lt; endl;<span class="hljs-comment">//err</span><br><br>    <span class="hljs-comment">//修改另一.c文件中为 extern const int m_C = 20;</span><br>    cout &lt;&lt; m_C &lt;&lt; endl;<span class="hljs-comment">//ok</span><br>&#125;<br><br><span class="hljs-comment">/*const分配内存情况*/</span><br><span class="hljs-comment">//1、对const修饰的变量取地址，会分配临时内存</span><br><br><span class="hljs-comment">//2、const修饰的变量前加 extern 关键字</span><br><br><span class="hljs-comment">//3、使用变量来初始化const修饰的变量</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test04</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> m_D = a;<br>    <span class="hljs-keyword">int</span> *p = (<span class="hljs-keyword">int</span> *)m_D;<br>    *p = <span class="hljs-number">20</span>;<br>    cout &lt;&lt; m_D &lt;&lt; endl;<span class="hljs-comment">//修改成功</span><br>&#125;<br><br><span class="hljs-comment">//4、const修饰自定义数据类型</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br>    string name;<br>    <span class="hljs-keyword">int</span> age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test05</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">const</span> Person p;<br>    <span class="hljs-comment">// p.name = &quot;aaa&quot;;//err</span><br>    <span class="hljs-comment">// p.age = 10;//err</span><br><br>    Person *pp = (Person*)&amp;p;<br>    pp-&gt;name = <span class="hljs-string">&quot;aaa&quot;</span>;<span class="hljs-comment">//OK</span><br>    pp-&gt;age = <span class="hljs-number">10</span>;<span class="hljs-comment">//OK</span><br>&#125;<br><br><span class="hljs-comment">/*尽量利用const代替#define*/</span><br><span class="hljs-comment">//1. 宏常量没有类型</span><br><span class="hljs-comment">//2. 不重视作用域</span><br></code></pre></div></td></tr></table></figure></li><li><p>const 与 define 相同</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//#define N 30</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">int</span> array[a + b] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>const 和 define 不同</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//const常量是由编译器处理的，提供类型检查和作用域检查</span><br><span class="hljs-comment">//宏定义由预处理器处理，单纯的文本替换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 10</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//#undef M</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;M = %d&quot;</span>, M);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d&quot;</span>, a);<span class="hljs-comment">//err，作用域检查</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun3</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *p)</span></span><br><span class="hljs-function"></span>&#123;<br>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">fun1</span>();<br><span class="hljs-built_in">fun2</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<span class="hljs-comment">//err, 类型检查</span><br><span class="hljs-built_in">fun3</span>(b);<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><hr><h4 id="真正的枚举"><a href="#真正的枚举" class="headerlink" title="真正的枚举"></a>真正的枚举</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//c语言 中枚举本质就是整型,枚举变量可以用任意整型赋值</span><br><span class="hljs-comment">//c++ 中枚举变量, 只能用被枚举出来的元素初始化。</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">season</span> &#123;</span>Spri, Sum, Aut, Win&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">season</span> <span class="hljs-title">s</span> =</span> Spri;<br>s = Sum;<br><br><span class="hljs-comment">//s = 0; // err,但C语言可编译通过</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/08/05/hello-world/"/>
    <url>/2021/08/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo new <span class="hljs-string">&quot;My New Post&quot;</span></span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mian</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
